substitutions:
  name: "topwinestairs"
  friendly_name: "Light Switches at top of the wine cellar stairs"
  wifi_network1_prefix1: !secret wifi_network1_prefix1
  ip_suffix: "231"
  timezone: "Australia/Perth"
  sntp_update_interval: 6h
  sntp_server_1: "0.pool.ntp.org"
  sntp_server_2: "1.pool.ntp.org"
  sntp_server_3: "2.pool.ntp.org"
  room: "Landing"
  light1_restore_mode: RESTORE_DEFAULT_OFF
  light2_restore_mode: RESTORE_DEFAULT_OFF
  light3_restore_mode: RESTORE_DEFAULT_OFF
  device_description: "3-Gang Wall light switch located at top of stairs above wine cellar esp8266"
  log_level: "DEBUG"
  ipv6_enable: "false"
  project_name: "The Automatic Home.2Gang Switch V2"
  project_version: "v1.1.2"
  dns_domain: ""
  localssid: "topwinestairs"

<<: !include .gallerywap11.yaml

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: "${device_description}"
  area: "${room}"
  name_add_mac_suffix: false
  min_version: 2024.6.0
  project:
    name: "${project_name}"
    version: "${project_version}"

esp8266:
  board: esp8285
  restore_from_flash: true

preferences:
  flash_write_interval: 1min

api:
  services:
    - service: scan_wifi
      then:
        - lambda: |-
            wifi::global_wifi_component->start_scanning();

ota:
  - platform: esphome
  - platform: http_request

logger:
  level: ${log_level}
  baud_rate: 115200

mdns:
  disabled: false

web_server:
  port: 80
  version: 3

network:
  enable_ipv6: ${ipv6_enable}

http_request:
  verify_ssl: false

captive_portal:

dashboard_import:
  package_import_url: github://trendstyle/theautomatichome.com/Esphome/3gang-light.yaml

globals:
  - id: restore_mode
    type: int
    restore_value: yes
    initial_value: "3"

select:
  - platform: template
    name: "Power On State"
    id: "power_mode"
    optimistic: true
    options:
      - Always Off
      - Always On
      - Restore Power Off State
    on_value:
      then:
        - lambda: |-
            id(restore_mode)=i+1;

binary_sensor:
  - platform: gpio
    pin:
      inverted: true
      number: GPIO12
      mode:
        input: true
        pullup: true
    name: "Button1"
    id: button1
    disabled_by_default: true
    icon: "mdi:gesture-tap"

sensor:
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    update_interval: 1h
    icon: "mdi:wifi"

  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    entity_category: diagnostic
    internal: true
    icon: "mdi:clock-outline"

  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
    icon: "mdi:wifi-strength-outline"

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    icon: "mdi:wifi-strength-percent"

button:
  - platform: restart
    name: "Restart"
    entity_category: config
    icon: "mdi:restart"

  - platform: factory_reset
    name: "Factory Reset"
    id: Reset
    entity_category: config
    icon: "mdi:factory"

  - platform: safe_mode
    name: "Safe Mode"
    internal: false
    entity_category: config
    icon: "mdi:shield-check"

  - platform: template
    name: "Switch to Tasmota"
    entity_category: diagnostic
    icon: "mdi:swap-horizontal"
    on_press:
      then:
        - ota.http_request.flash:
            md5_url: github://trendstyle/theautomatichome.com/Tasmota/tasmota.md5
            url: github://trendstyle/theautomatichome.com/Tasmota/tasmota.bin.gz
        - logger.log: "This message should be not displayed because the device reboots"

  - platform: template
    name: "Factory reset ESPHOME"
    entity_category: diagnostic
    icon: "mdi:recycle"
    on_press:
      then:
        - ota.http_request.flash:
            md5_url: github://trendstyle/theautomatichome.com/Esphome/topwinestairs.md5
            url: github://trendstyle/theautomatichome.com/Esphome/topwinestairs.bin
        - logger.log: "This message should be not displayed because the device reboots"

  - platform: template
    name: "Flash ESPHOME MINIMAL"
    entity_category: diagnostic
    icon: "mdi:arrow-up"
    on_press:
      then:
        - ota.http_request.flash:
            md5_url: github://trendstyle/theautomatichome.com/Esphome/Public-firmwares/minimal8266.md5
            url: github://trendstyle/theautomatichome.com/Esphome/Public-firmwares/minimal8266.bin
        - logger.log: "This message should be not displayed because the device reboots"

output:
  - platform: gpio
    pin: GPIO13
    id: relay1
  - platform: gpio
    pin: GPIO4
    id: relay2
  - platform: gpio
    pin: GPIO15
    id: relay3

  - platform: esp8266_pwm
    pin: GPIO16
    inverted: true
    id: button_led1
  - platform: esp8266_pwm
    pin: GPIO14
    inverted: true
    id: button_led2
  - platform: esp8266_pwm
    pin: GPIO1
    inverted: true
    id: button_led3

light:
  - platform: binary
    name: "Landing"
    id: landing
    output: relay1
    restore_mode: ${light1_restore_mode}
    icon: "mdi:lightbulb-on"

  - platform: binary
    name: "Stairs"
    id: stairs
    output: relay2
    restore_mode: ${light2_restore_mode}
    icon: "mdi:lightbulb-on"

  - platform: binary
    name: "Serverroom"
    id: serverroom
    output: relay3
    restore_mode: ${light3_restore_mode}
    icon: "mdi:lightbulb-on"

  - platform: monochromatic
    name: "LED1"
    id: led1
    output: button_led1
    default_transition_length: 500ms
    icon: "mdi:led-on"

  - platform: monochromatic
    name: "LED2"
    id: led2
    output: button_led2
    default_transition_length: 500ms
    icon: "mdi:led-on"

  - platform: monochromatic
    name: "LED3"
    id: led3
    output: button_led3
    default_transition_length: 500ms
    icon: "mdi:led-on"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: diagnostic
      icon: "mdi:ip"

    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
      icon: "mdi:wifi"

    mac_address:
      name: "Mac Address"
      entity_category: diagnostic
      icon: "mdi:barcode-scan"

    bssid:
      name: "WiFi BSSID"
      entity_category: diagnostic
      icon: "mdi:router-wireless"

    dns_address:
      name: "WiFi DNS Address"
      entity_category: diagnostic
      icon: "mdi:domain"

  - platform: template
    name: "Last WiFi Scan Results"
    id: wifi_scan
    icon: "mdi:wifi-marker"

  - platform: template
    name: "Last Restart"
    id: device_last_restart
    icon: "mdi:clock"

  - platform: template
    name: "Uptime"
    entity_category: diagnostic
    lambda: |-
      int seconds = (id(uptime_sensor).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if (days > 3650) {
        return {"Starting up"};
      } else if (days) {
        return { (String(days) + "d " + String(hours) + "h " + String(minutes) + "m " + String(seconds) + "s").c_str() };
      } else if (hours) {
        return { (String(hours) + "h " + String(minutes) + "m " + String(seconds) + "s").c_str() };
      } else if (minutes) {
        return { (String(minutes) + "m " + String(seconds) + "s").c_str() };
      } else {
        return { (String(seconds) + "s").c_str() };
      }
    icon: mdi:clock-start

time:
  - platform: sntp
    id: sntp_time
    timezone: "${timezone}"
    update_interval: ${sntp_update_interval}
    servers:
      - "${sntp_server_1}"
      - "${sntp_server_2}"
      - "${sntp_server_3}"
    on_time_sync:
      then:
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'



#switch:
 # - platform: template
  #  name: "Trigger WiFi Scan"
  #  id: wifi_scan_trigger
   # turn_on_action:
    #  - lambda: |-
     #     wifi::global_wifi_component->start_scanning();  // Manually trigger a Wi-Fi scan
     # - switch.turn_off: wifi_scan_trigger  # Automatically turn off the switch after triggering

interval:
  - interval: 12h  # Adjust this as needed
    then:
      - lambda: |-
          auto results = wifi::global_wifi_component->get_scan_result();
          if (results.empty()) {
            id(wifi_scan).publish_state("No networks found");
          } else {
            std::vector<wifi::WiFiScanResult> unique_results;

            // Filter unique results by BSSID (MAC)
            for (auto &result : results) {
              bool found = false;
              for (auto &existing_result : unique_results) {
                if (result.get_bssid() == existing_result.get_bssid()) {
                  found = true;
                  break;
                }
              }
              if (!found) {
                unique_results.push_back(result);
              }
            }

            // Sort by RSSI (strongest signal first)
            std::sort(unique_results.begin(), unique_results.end(), [](auto &a, auto &b) {
              return a.get_rssi() > b.get_rssi();
            });

            std::string output;
            int count = 0;  // To limit to top 3 networks
            for (auto &result : unique_results) {
              if (count >= 3) break;

              auto ssid = result.get_ssid();
              auto rssi = result.get_rssi();
              if (ssid.empty()) continue;

              std::string stars;
              if (rssi > -50) stars = "★★★★";
              else if (rssi > -60) stars = "★★★";
              else if (rssi > -70) stars = "★★";
              else stars = "★";

              int signal_percent = 2 * (rssi + 100);
              signal_percent = std::clamp(signal_percent, 0, 100);

              // Format output as stars, SSID, signal strength in %, and RSSI in dB
              output += stars + " " + ssid + " " + std::to_string(signal_percent) + "% " + std::to_string(rssi) + " dB\n";
              count++;
            }

            if (output.empty()) {
              id(wifi_scan).publish_state("No named networks found");
            } else {
              id(wifi_scan).publish_state(output);
            }
          }
switch:
  - platform: template
    name: "Trigger WiFi Scan"
    id: wifi_scan_trigger
    turn_on_action:
      - lambda: |-
          // Start the Wi-Fi scan
          wifi::global_wifi_component->start_scanning();
      - delay: 10s  # Allow time for the scan to complete
      - lambda: |-
          // Get the scan results
          auto results = wifi::global_wifi_component->get_scan_result();

          if (results.empty()) {
            id(wifi_scan).publish_state("No networks found");
          } else {
            std::vector<wifi::WiFiScanResult> unique_results;

            // Filter unique results by BSSID (MAC)
            for (auto &result : results) {
              bool found = false;
              for (auto &existing_result : unique_results) {
                if (result.get_bssid() == existing_result.get_bssid()) {
                  found = true;
                  break;
                }
              }
              if (!found) {
                unique_results.push_back(result);
              }
            }

            // Sort by RSSI (strongest signal first)
            std::sort(unique_results.begin(), unique_results.end(), [](auto &a, auto &b) {
              return a.get_rssi() > b.get_rssi();
            });

            std::string output;
            int count = 0;  // To limit to top 3 networks
            for (auto &result : unique_results) {
              if (count >= 3) break;

              auto ssid = result.get_ssid();
              auto rssi = result.get_rssi();
              if (ssid.empty()) continue;

              std::string stars;
              if (rssi > -50) stars = "★★★★";
              else if (rssi > -60) stars = "★★★";
              else if (rssi > -70) stars = "★★";
              else stars = "★";

              int signal_percent = 2 * (rssi + 100);
              signal_percent = std::clamp(signal_percent, 0, 100);

              // Format output as stars, SSID, signal strength in %, and RSSI in dB
              output += stars + " " + ssid + " " + std::to_string(signal_percent) + "% " + std::to_string(rssi) + " dB\n";
              count++;
            }

            if (output.empty()) {
              id(wifi_scan).publish_state("No named networks found");
            } else {
              id(wifi_scan).publish_state(output);
            }
          }
      - switch.turn_off: wifi_scan_trigger  # Automatically turn off the switch after the action
